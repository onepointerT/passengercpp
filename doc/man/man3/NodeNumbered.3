.TH "NodeNumbered< GraphPassengerT, num >" 3 "Version 0.1.0" "passengercpp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NodeNumbered< GraphPassengerT, num > \- A numbered and controlled node, inheriting \fR\fBNode\fP< GraphPassengerT >\fP and \fR\fBPassengerNumber\fP< num >\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <passenger\&.hpp>\fP
.PP
Inherits \fBNode< GraphPassengerNumber<> >\fP, and \fBPassengerNumber< num_default >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNodeNumbered\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual bool \fBcan_arrive\fP (const GraphPassengerT &passenger)"
.br
.RI "Check, if a graph traveller can arrive\&. "
.ti -1c
.RI "virtual bool \fBarrive\fP (const GraphPassengerT &passenger)"
.br
.RI "Arrive at this targeting node\&. "
.ti -1c
.RI "bool \fBadd_member_range\fP (const num from, const num to)"
.br
.RI "Add a \fR\fBRange\fP< num >\fP (from, to), that reflects new members, allowances or disallowances with a class inheriting from \fR\fBNumberEnumeration\fP\fP\&. "
.in -1c

Public Member Functions inherited from \fBNode< GraphPassengerNumber<> >\fP
.in +1c
.ti -1c
.RI "\fBNode\fP ()"
.br
.RI "The constructor\&. "
.ti -1c
.RI "virtual bool \fBarrive\fP (const \fBGraphPassengerNumber\fP<> &passenger)"
.br
.RI "Arrive with one traveller's marker at this node\&. "
.ti -1c
.RI "virtual \fBGraphPassengerNumber\fP<> & \fBpop\fP ()"
.br
.RI "Get the first element out of the queue and delete it inside of the queue\&. "
.ti -1c
.RI "virtual bool \fBdeparture\fP ()"
.br
.RI "Leave this node\&. Calls \fRthis->pop()\fP, but needs to be specialiced in inheriting class, because no edge is known here\&. "
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBNode< GraphPassengerNumber<> >\fP
.in +1c
.ti -1c
.RI "typedef \fBGraphPassengerNumber\fP<> \fBnode_passenger_t\fP"
.br
.RI "The type of the node traveller\&. "
.in -1c

Protected Types inherited from \fBPassengerNumber< num_default >\fP
.in +1c
.ti -1c
.RI "typedef \fBNumberEnumeration\fP< \fBnum_default\fP > \fBnumberenumeration_t\fP"
.br
.RI "A \fR\fBNumberEnumeration\fP< num >\fP with the numeric type \fRnum\fP\&. "
.ti -1c
.RI "typedef \fBRange\fP< \fBnum_default\fP > \fBmember_t\fP"
.br
.RI "A \fR\fBRange\fP< num >\fP with the numeric type \fRnum\fP\&. "
.in -1c

Protected Member Functions inherited from \fBPassengerNumber< num_default >\fP
.in +1c
.ti -1c
.RI "const \fBnum_default\fP \fBhighest_member_number\fP (const \fBNumberEnumeration\fP< \fBnum_default\fP > members)"
.br
.RI "The infimum (highest number) of a number enumeration\&. "
.ti -1c
.RI "bool \fBmember_range_disjunct\fP (const \fBmember_t\fP mem) const"
.br
.RI "Find out, if another member range is disjunct to all other ranges, that means that it is not within one of the \fR\fBRange\fP\fP of \fRm_members\fP\&. "
.ti -1c
.RI "bool \fBmember_ranges_disjunct\fP () const"
.br
.RI "Find out, if all member ranges are disjunct to all other ranges, that means that it is not within one of the \fR\fBRange\fP\fP per object of \fRm_members\fP\&. "
.in -1c
.in +1c
.ti -1c
.RI "\fBPassengerNumber\fP (const \fBNumberEnumeration\fP< \fBnum_default\fP > members=\fBNumberEnumeration\fP< \fBnum_default\fP >())"
.br
.RI "The constructor\&. "
.ti -1c
.RI "\fBPassengerNumber\fP ()"
.br
.RI "The constructor\&. "
.ti -1c
.RI "bool \fBadd_member\fP (const \fBmember_t\fP member_range)"
.br
.RI "Add a new member range to \fRm_members\fP\&. Only fulfills, if disjunct to the others that are already stored\&. "
.in -1c

Protected Attributes inherited from \fBNode< GraphPassengerNumber<> >\fP
.in +1c
.ti -1c
.RI "std::queue< \fBGraphPassengerNumber\fP<> & > \fBm_arrivals\fP"
.br
.RI "A \fRstd::queue\fP with all graph markers that are currently at this node\&. "
.in -1c

Protected Attributes inherited from \fBPassengerNumber< num_default >\fP
.in +1c
.ti -1c
.RI "\fBNumberEnumeration\fP< \fBnum_default\fP > \fBm_members\fP"
.br
.RI "The members that are enumerated here\&. "
.ti -1c
.RI "\fBnum_default\fP \fBm_members_count\fP"
.br
.RI "The amount of members that are in the ranges of \fRm_members\fP\&. "
.ti -1c
.RI "\fBnum_default\fP \fBm_members_there\fP"
.br
.RI "The amount of members that are here\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class GraphPassengerT = GraphPassengerNumber<>, typename num = num_default>
.br
class NodeNumbered< GraphPassengerT, num >"A numbered and controlled node, inheriting \fR\fBNode\fP< GraphPassengerT >\fP and \fR\fBPassengerNumber\fP< num >\fP\&. 


.PP
\fBNote\fP
.RS 4
This is the last class without an edge as template parameter\&. Please have this in mind because of cyclic template parameters\&. NOTE: Base classes also work as a template parameter\&. 
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIGraphPassengerT\fP A graph passenger's graph marker, an inheritor of at least \fR\fBGraphPassenger\fP\fP\&. 
.br
\fInum\fP The numeric type of member ranges and \fR\fBPassengerNumber\fP\fP\&. 
.RE
.PP

.PP
Definition at line \fB258\fP of file \fBpassenger\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class GraphPassengerT  = GraphPassengerNumber<>, typename num  = num_default> \fBNodeNumbered\fP< GraphPassengerT, num >\fB::NodeNumbered\fP ()\fR [inline]\fP"

.PP
Constructor\&. 
.PP
Definition at line \fB264\fP of file \fBpassenger\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<class GraphPassengerT  = GraphPassengerNumber<>, typename num  = num_default> bool \fBNodeNumbered\fP< GraphPassengerT, num >::add_member_range (const num from, const num to)\fR [inline]\fP"

.PP
Add a \fR\fBRange\fP< num >\fP (from, to), that reflects new members, allowances or disallowances with a class inheriting from \fR\fBNumberEnumeration\fP\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP A range that interval includes all member's numbers\&. 
.RE
.PP

.PP
Definition at line \fB288\fP of file \fBpassenger\&.hpp\fP\&.
.SS "template<class GraphPassengerT  = GraphPassengerNumber<>, typename num  = num_default> virtual bool \fBNodeNumbered\fP< GraphPassengerT, num >::arrive (const GraphPassengerT & passenger)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Arrive at this targeting node\&. 
.PP
\fBParameters\fP
.RS 4
\fIpassenger\fP A graph passenger 
.RE
.PP
\fBReturns\fP
.RS 4
True, if \fRthis->can_arrive(passenger) && \fBNode\fP< GraphPassengerT >::arrive(passenger)\fP\&. 
.RE
.PP

.PP
Reimplemented in \fBPassengerNodeActional< GraphPassengerT, EdgeT, num >\fP\&.
.PP
Definition at line \fB279\fP of file \fBpassenger\&.hpp\fP\&.
.SS "template<class GraphPassengerT  = GraphPassengerNumber<>, typename num  = num_default> virtual bool \fBNodeNumbered\fP< GraphPassengerT, num >::can_arrive (const GraphPassengerT & passenger)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Check, if a graph traveller can arrive\&. 
.PP
\fBParameters\fP
.RS 4
\fIpassenger\fP A passenger towards this node\&. 
.RE
.PP
\fBReturns\fP
.RS 4
True, if \fRpassenger\fP is a member of \fRm_members\fP\&. 
.RE
.PP

.PP
Definition at line \fB272\fP of file \fBpassenger\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for passengercpp from the source code\&.
